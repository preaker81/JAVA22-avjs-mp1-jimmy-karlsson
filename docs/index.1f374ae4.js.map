{"mappings":"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","sources":["src/js/highscore.js","src/main.js","src/js/RockPaperScissors.js"],"sourcesContent":["// Define the URL for the Firebase Realtime Database storing highscores\r\nconst url =\r\n  \"https://highscore-ff271-default-rtdb.europe-west1.firebasedatabase.app/highscores.json\";\r\n\r\n// Fetch highscores from the database\r\nasync function getHighscores() {\r\n  const response = await fetch(url);\r\n  return Object.values(await response.json());\r\n}\r\n\r\n// Update the highscores with a new entry, keeping only the top 5 scores\r\nasync function updateHighscores(newEntry) {\r\n  const highscores = await getHighscores();\r\n  highscores.push(newEntry);\r\n  highscores.sort((a, b) => b.score - a.score).splice(5);\r\n\r\n  // Update the Firebase Realtime Database with the new highscores\r\n  const updatePromises = highscores.map(async (entry, i) => {\r\n    const userKey = `user${i + 1}`;\r\n    await fetch(`${url.slice(0, -5)}/${userKey}.json`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(entry),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  });\r\n\r\n  await Promise.all(updatePromises); // Wait for all updates to finish\r\n}\r\n\r\n// Remove all child elements of a specified parent element\r\nfunction removeChildElements(parentElement) {\r\n  const parent = document.getElementById(parentElement);\r\n  if (parent) {\r\n    while (parent.firstChild) {\r\n      parent.firstChild.remove();\r\n    }\r\n  }\r\n}\r\n\r\n// Display the highscores on the webpage\r\nasync function displayHighscores(parentElement, newEntry = null) {\r\n  const highscores = await getHighscores();\r\n\r\n  if (newEntry) {\r\n    // Check if the newEntry is already in the highscores\r\n    const newEntryExists = highscores.some(\r\n      (entry) => entry.name === newEntry.name && entry.score === newEntry.score\r\n    );\r\n\r\n    // If newEntry is not in the highscores, add and sort it\r\n    if (!newEntryExists) {\r\n      highscores.push(newEntry);\r\n      highscores.sort((a, b) => b.score - a.score).splice(5);\r\n    }\r\n  }\r\n\r\n  // Select the parent element to display the highscores\r\n  const displayDiv = parentElement\r\n    ? document.getElementById(parentElement)\r\n    : document.getElementById(\"displayDiv\");\r\n\r\n  // Clear the existing highscores display\r\n  removeChildElements(\"displayDiv\");\r\n\r\n  // Create and append highscore elements to the displayDiv\r\n  highscores.forEach((entry, index) => {\r\n    const highscoreP = document.createElement(\"p\");\r\n    highscoreP.innerHTML = `${index + 1}. ${entry.name}: ${entry.score}`;\r\n    displayDiv.appendChild(highscoreP);\r\n  });\r\n}\r\n\r\n// Export the functions to be used in other files\r\nexport { updateHighscores, displayHighscores };\r\n","import { RockPaperScissors } from \"./js/RockPaperScissors.js\";\r\n\r\nconst game = new RockPaperScissors();\r\n","// Importing necessary functions from highscore.js\r\nimport { updateHighscores, displayHighscores } from \"./highscore.js\";\r\n\r\n// The RockPaperScissors class containing the game logic\r\nexport class RockPaperScissors {\r\n  constructor() {\r\n    // Initializing variables and selecting necessary DOM elements\r\n    this.selectionBtns = document.querySelectorAll(\"[data-selection]\");\r\n    this.finalColumn = document.getElementById(\"roundResult\");\r\n    this.playerScoreSpan = document.getElementById(\"playerScore\");\r\n    this.selections = [\r\n      {\r\n        name: \"rock\",\r\n        emoji: \"✊\",\r\n        beats: \"scissors\",\r\n      },\r\n      {\r\n        name: \"paper\",\r\n        emoji: \"✋\",\r\n        beats: \"rock\",\r\n      },\r\n      {\r\n        name: \"scissors\",\r\n        emoji: \"✌️\",\r\n        beats: \"paper\",\r\n      },\r\n    ];\r\n\r\n    // Calling method to set up event listeners\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  // Method to initialize event listeners\r\n  initializeEventListeners() {\r\n    // Event listener for the name input form submission\r\n    document\r\n      .getElementById(\"formNameInput\")\r\n      .addEventListener(\"submit\", (event) => this.handleNameInput(event));\r\n    // Event listener for the selection buttons\r\n    this.selectionBtns.forEach((selectionBtn) => {\r\n      selectionBtn.addEventListener(\"click\", (event) =>\r\n        this.handleSelectionClick(event, selectionBtn)\r\n      );\r\n    });\r\n  }\r\n\r\n  // Method to handle the name input form submission\r\n  handleNameInput(event) {\r\n    event.preventDefault();\r\n    const inputText = document.getElementById(\"inputText\");\r\n    const playerName = document.getElementById(\"playerName\");\r\n    playerName.innerText = inputText.value || \"Player\";\r\n    inputText.value = \"\";\r\n    this.clearElement(document.getElementById(\"formNameInput\"));\r\n    document\r\n      .querySelectorAll(\".selection\")\r\n      .forEach((element) => element.classList.remove(\"hidden\"));\r\n  }\r\n\r\n  // Method to clear an element of its child nodes\r\n  clearElement(element) {\r\n    while (element.firstChild) {\r\n      element.firstChild.remove();\r\n    }\r\n  }\r\n\r\n  // Method to create an HTML element with optional properties\r\n  createHTMLElement(tag, options = {}) {\r\n    const element = document.createElement(tag);\r\n    for (const [key, value] of Object.entries(options)) {\r\n      element[key] = value;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  // Method to handle selection button clicks\r\n  handleSelectionClick(event, selectionBtn) {\r\n    const selectionName = selectionBtn.dataset.selection;\r\n    const selection = this.selections.find(\r\n      (selection) => selection.name === selectionName\r\n    );\r\n    this.makeSelection(selection);\r\n  }\r\n\r\n  // Method to handle the player's selection\r\n  makeSelection(selection) {\r\n    const computerSelection = this.computerRandomSelect();\r\n    const playerWinner = this.isWinner(selection, computerSelection);\r\n    const computerWinner = this.isWinner(computerSelection, selection);\r\n\r\n    this.addSelectionResult(computerSelection, computerWinner);\r\n    this.addSelectionResult(selection, playerWinner);\r\n\r\n    if (playerWinner) this.incrementScore(this.playerScoreSpan);\r\n\r\n    this.endGame(this.playerScoreSpan, computerWinner);\r\n  }\r\n\r\n  // Method to increment the score\r\n  incrementScore(scoreSpan) {\r\n    if (scoreSpan) {\r\n      scoreSpan.innerText = parseInt(scoreSpan.innerText) + 1;\r\n    }\r\n  }\r\n\r\n  // Method to add the result of a selection\r\n  addSelectionResult(selection, winner) {\r\n    const div = document.createElement(\"div\");\r\n    div.innerText = selection.emoji;\r\n    div.classList.add(\"resultSelection\");\r\n\r\n    if (winner) div.classList.add(\"winner\");\r\n    this.finalColumn.after(div);\r\n  }\r\n\r\n  // Method to determine if a selection wins over the opponent's selection\r\n  isWinner(selection, opponentSelection) {\r\n    return selection.beats === opponentSelection.name;\r\n  }\r\n\r\n  // Method for the computer to make a random selection\r\n  computerRandomSelect() {\r\n    const randomIndex = Math.floor(Math.random() * this.selections.length);\r\n    return this.selections[randomIndex];\r\n  }\r\n\r\n  // Method to end the game and update highscores\r\n  async endGame(playerScore, computerWinner) {\r\n    if (computerWinner) {\r\n      // Check if computerWinner is true\r\n      const playerName = document.getElementById(\"playerName\").innerText;\r\n      const newEntry = {\r\n        name: playerName,\r\n        score: parseInt(playerScore.innerText),\r\n      };\r\n\r\n      await updateHighscores(newEntry);\r\n\r\n      document.querySelectorAll(\".selection\").forEach((btn) => {\r\n        btn.classList.add(\"hidden\");\r\n      });\r\n\r\n      const div = this.createHTMLElement(\"div\", { className: \"newGameDiv\" });\r\n      const h1 = this.createHTMLElement(\"H1\", {\r\n        id: \"victoryH1\",\r\n        innerText: `Game over, try again!`,\r\n      });\r\n      const btn = this.createHTMLElement(\"button\", {\r\n        id: \"newGameBtn\",\r\n        innerText: \"New Game\",\r\n      });\r\n      btn.addEventListener(\"click\", () => {\r\n        location.reload();\r\n      });\r\n      const displayDiv = this.createHTMLElement(\"div\", { id: \"displayDiv\" });\r\n\r\n      document.querySelector(\".selections\").append(div);\r\n      div.append(h1, btn, displayDiv);\r\n\r\n      await displayHighscores(\"displayDiv\", newEntry);\r\n    }\r\n  }\r\n}\r\n"],"names":["$735b27629e838dcd$var$url","async","$735b27629e838dcd$var$getHighscores","response","fetch","Object","values","json","$735b27629e838dcd$export$a541beb660d65f60","newEntry","highscores","push","sort","a","b","score","splice","updatePromises","map","entry","i","userKey","slice","method","body","JSON","stringify","headers","Promise","all","$735b27629e838dcd$export$b9501187a90c1efb","parentElement","some","name","displayDiv","document","getElementById","parent","firstChild","remove","$735b27629e838dcd$var$removeChildElements","forEach","index","highscoreP","createElement","innerHTML","appendChild","constructor","this","selectionBtns","querySelectorAll","finalColumn","playerScoreSpan","selections","emoji","beats","initializeEventListeners","addEventListener","event","handleNameInput","selectionBtn","handleSelectionClick","preventDefault","inputText","innerText","value","clearElement","element","classList","createHTMLElement","tag","options","key","entries","selectionName","dataset","selection","find","makeSelection","computerSelection","computerRandomSelect","playerWinner","isWinner","computerWinner","addSelectionResult","incrementScore","endGame","scoreSpan","parseInt","winner","div","add","after","opponentSelection","randomIndex","Math","floor","random","length","playerScore","btn","className","h1","id","location","reload","querySelector","append"],"version":3,"file":"index.1f374ae4.js.map"}